---
- name: Create VPC, Subnet, IGW, Route Table, SG, Deploy RHEL Machine, Start it and Wait until SSH is accessible
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    region: us-east-1
    vpc_cidr: 10.0.0.60/16
    subnet_cidr: 10.0.1.16/24
    keypair: ansible-key
    instance_type: t2.micro
    image: ami-0477b9335a5a75438
    security_group: ansible-sg
    instance_name: ansible-instance
  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: ansible-vpc
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        tags:
          Name: ansible-vpc
      register: vpc
    - name: Create Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        region: "{{ region }}"
        tags:
          Name: ansible-subnet
      register: subnet
    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: ansible-igw
      register: igw
    - name: Create Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: ansible-route-table
      register: route_table
    - name: Create Security Group
      amazon.aws.ec2_security_group:
        name: "{{ security_group }}"
        description: Ansible Security Group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
            cidr_ip: "0.0.0.0/0"
        tags:
          Name: ansible-sg
      register: sg
    - name: Create EC2 Instance
      ec2:
        key_name: "{{ _key_name_ }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        group_id: "{{ sg.group_id }}"
        instance_tags:
          Name: "{{ instance_name }}"
      register: ec2
    - name: Wait for SSH to be available
      loop: "{{ ec2.instances }}"
      ansible.builtin.wait_for:
        host: "{{ _host_ }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
